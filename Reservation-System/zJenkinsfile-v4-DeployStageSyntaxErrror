

pipeline {
    agent any

    environment {
        PROJECT_DIR = 'Reservation-System'

        APP_NAME = 'reservation-system'

        // Version control
        GIT_REPO = 'https://github.com/imbilalbutt/Train-ticket-reservation-system.git'
        BRANCH = 'Jetty-Server' // 'master'

        // Build tools
        M2_HOME = '/Users/imbilalbutt/Downloads/apache-maven-3.9.11/bin'
        PATH = "${M2_HOME}:${PATH}"

        // Database
        POSTGRES_JDBC_URL = 'jdbc:postgresql://localhost:5433/lhr_rsv' // ${SPRING_DATASOURCE_URL}
        POSTGRES_USER = 'imbilalbutt' // ${SPRING_DATASOURCE_USERNAME}
        POSTGRES_PASSWORD = 'password@123' // ${SPRING_DATASOURCE_PASSWORD}

        // Server configurations
        JETTY_HOME = '/Users/imbilalbutt/Downloads/jetty-home-12.0.23'
        WILDFLY_HOME = '/Users/imbilalbutt/Downloads/wildfly-30.0.0.Final'
        DEPLOYMENT_TARGET = 'jetty' // 'jetty' or 'wildfly'
        SERVER_PORT = '9090'

    }

    stages {
        stage('Checkout') {
            steps {
                git branch: BRANCH, url: GIT_REPO
                // git 'https://github.com/dstar55/docker-hello-world-spring-boot.git'
            }
        }

        stage('Verify Project Structure') {
            steps {
                script {
                    // Verify POM exists in the expected location
                    def pomExists = fileExists "${env.PROJECT_DIR}/pom.xml"
                    if (!pomExists) {
                        error "POM file not found in ${env.PROJECT_DIR}. Please check your project structure."
                    }

                    // Print directory structure for debugging
                    sh "ls -la ${env.PROJECT_DIR}"
                }
            }
        }




        stage('Run Tests') {

            steps {
                dir(PROJECT_DIR) {  // Change to project directory
                    sh 'mvn test'
                }
            }

            post {
                failure {
                    error 'Tests failed! Pipeline aborted.'
                }
            }
        }

        stage('Build') {
            steps {
                dir(PROJECT_DIR) {  // Change to project directory
//                 sh 'mvn clean package -DskipTests'
                   sh 'mvn package -DskipTests'
                }
            }
            post {
                success {
                    dir(PROJECT_DIR) {
                        // junit "${PROJECT_DIR}/target/surefire-reports/TEST-*.xml"
                        // archiveArtifacts "${PROJECT_DIR}/target/*.jar"
                        junit '**/target/surefire-reports/TEST-*.xml'
                        archiveArtifacts '**/target/*.jar'
                    }
                }
                failure {
                    error 'Build failed! Pipeline aborted.'
                }
            }
        }

        stage('Deploy') {
    steps {
        script {
            dir(PROJECT_DIR) {
                // Find the built artifact
                def artifactPath = null

                // Check for specific artifact names first
                if (fileExists("target/${APP_NAME}.jar")) {
                    artifactPath = "target/${APP_NAME}.jar"
                } else if (fileExists("target/${APP_NAME}.war")) {
                    artifactPath = "target/${APP_NAME}.war"
                } else {
                    // Fallback to any JAR/WAR file
                    def files = sh(script: "ls target/*.{jar,war} 2>/dev/null | head -1", returnStdout: true).trim()
                    if (files) {
                        artifactPath = files
                    } else {
                        error "No deployable artifact found in ${PROJECT_DIR}/target/"
                    }
                }

                // Verify we found an artifact
                if (!artifactPath) {
                    error "Failed to locate deployable artifact in ${PROJECT_DIR}/target/"
                }

                // Deploy based on target server
                switch(DEPLOYMENT_TARGET) {
                    case 'jetty':
                        deployToJetty(artifactPath)
                        break
                    case 'wildfly':
                        deployToWildFly(artifactPath)
                        break
                    default:
                        error "Unsupported deployment target: ${DEPLOYMENT_TARGET}"
                }
            }
        }
    }
}


}

// Deployment methods
def deployToJetty(String artifactPath) {
    echo "Deploying ${artifactPath} to Jetty"

    // Stop existing Jetty if running
    sh """
        pkill -f 'java.*jetty' || true
        rm -f ${JETTY_HOME}/webapps/ROOT.war
    """

    // Deploy artifact: First copy jar file on /webapps folder, then run the server
    sh """
        cp ${artifactPath} ${JETTY_HOME}/webapps/ROOT.war
        cd ${JETTY_HOME}
        nohup /bin/jetty.sh start -Djetty.http.port=${SERVER_PORT} > logs/jetty.log 2>&1 &
    """

    echo "Application deployed to Jetty on port ${SERVER_PORT}"
}

def deployToWildFly(String artifactPath) {
    echo "Deploying ${artifactPath} to WildFly"

    // Stop existing WildFly if running
    sh """
        ${WILDFLY_HOME}/bin/jboss-cli.sh --connect --command=:shutdown || true
    """

    // Deploy artifact
    sh """
        ${WILDFLY_HOME}/bin/jboss-cli.sh --connect \
        --command="deploy ${artifactPath} --server-groups=main-server-group"
    """

    // Start WildFly
    sh """
        nohup ${WILDFLY_HOME}/bin/standalone.sh > ${WILDFLY_HOME}/bin/standalone/log/server.log 2>&1 &
    """

    echo "Application deployed to WildFly"
}