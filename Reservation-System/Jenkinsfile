pipeline {
    agent any

    environment {
        PROJECT_DIR = 'Reservation-System'
        APP_NAME = 'reservation-system'
        GIT_REPO = 'https://github.com/imbilalbutt/Train-ticket-reservation-system.git'
        BRANCH = 'Jetty-Server'
        M2_HOME = '/Users/imbilalbutt/Downloads/apache-maven-3.9.11/bin'
        PATH = "${M2_HOME}:${PATH}"
        POSTGRES_JDBC_URL = 'jdbc:postgresql://localhost:5433/lhr_rsv'
        POSTGRES_USER = 'imbilalbutt'
        POSTGRES_PASSWORD = 'password@123'
        JETTY_HOME = '/Users/imbilalbutt/Downloads/jetty-home-12.0.23'
        WILDFLY_HOME = '/Users/imbilalbutt/Downloads/wildfly-30.0.0.Final'
        DEPLOYMENT_TARGET = 'jetty'
        SERVER_PORT = '9090'
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: BRANCH, url: GIT_REPO
            }
        }

        stage('Verify Project Structure') {
            steps {
                script {
                    if (!fileExists("${PROJECT_DIR}/pom.xml")) {
                        error "POM file not found in ${PROJECT_DIR}"
                    }
                    sh "ls -la ${PROJECT_DIR}"
                }
            }
        }

        stage('Run Tests') {
            steps {
                dir(PROJECT_DIR) {
                    sh 'mvn test'
                }
            }
            post {
                failure {
                    error 'Tests failed! Pipeline aborted.'
                }
            }
        }

        stage('Build') {
            steps {
                dir(PROJECT_DIR) {
                    sh 'mvn package -DskipTests'
                }
            }
            post {
                success {
                    dir(PROJECT_DIR) {
                        // junit 'target/surefire-reports/TEST-*.xml'
                        // archiveArtifacts "target/${APP_NAME}*.jar, target/${APP_NAME}*.war"
                         junit '**/target/surefire-reports/TEST-*.xml'
                         archiveArtifacts '**/target/*.jar'
                    }
                }
                failure {
                    error 'Build failed! Pipeline aborted.'
                }
            }
        }

        stage('Deploy') {
            steps {
                script {
                    dir(PROJECT_DIR) {
                        // Find the most recently modified artifact
                        def artifact = sh(script: """
                            ls -t target/${APP_NAME}*.jar target/${APP_NAME}*.war 2>/dev/null | head -1
                        """, returnStdout: true).trim()

                        if (!artifact) {
                            error "No deployable artifact found in target directory"
                        }

                        switch(DEPLOYMENT_TARGET) {
                            case 'jetty':
                                deployToJetty(artifact)
                                break
                            case 'wildfly':
                                deployToWildFly(artifact)
                                break
                            default:
                                error "Unsupported deployment target: ${DEPLOYMENT_TARGET}"
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
        success {
            echo "Pipeline succeeded"
        }
        failure {
            echo "Pipeline failed"
        }
    }
}

def deployToJetty(String artifactPath) {
    echo "Deploying ${artifactPath} to Jetty"
    sh """
        pkill -f 'java.*jetty' || true
        sleep 2
        rm -f ${JETTY_HOME}/webapps/ROOT.war
        cp ${artifactPath} ${JETTY_HOME}/webapps/ROOT.war
        cd ${JETTY_HOME}
        nohup bin/jetty.sh start -Djetty.http.port=${SERVER_PORT} > logs/jetty.log 2>&1 &
    """
    echo "Application deployed to Jetty on port ${SERVER_PORT}"
}

def deployToWildFly(String artifactPath) {
    echo "Deploying ${artifactPath} to WildFly"
    sh """
        ${WILDFLY_HOME}/bin/jboss-cli.sh --connect --command=:shutdown || true
        sleep 5
        ${WILDFLY_HOME}/bin/jboss-cli.sh --connect --command="deploy ${artifactPath}"
        nohup ${WILDFLY_HOME}/bin/standalone.sh > ${WILDFLY_HOME}/standalone/log/server.log 2>&1 &
    """
    echo "Application deployed to WildFly"
}